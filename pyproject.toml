[build-system]
requires = [
    "setuptools>=66.1",
    "setuptools_scm>=8.1"
]
build-backend = "setuptools.build_meta"

[project]
name = "mqt.qubomaker"
description = "A tool for the automatic generation and combination of QUBO formulations for specific problem classes."
readme = "README.md"
authors = [
    { name = "Damian Rovara", email = "damian.rovara@tum.de" },
    { name = "Nils Quetschlich", email = "nils.quetschlich@tum.de" },
    { name = "Lukas Burgholzer", email = "lukas.burgholzer@tum.de" },
]
keywords = ["MQT", "quantum-computing", "qubo", "shortest-path", "design-automation"]
license = { file = "LICENSE" }
requires-python = ">=3.9"
dynamic = ["version"]

dependencies = [
    "importlib_resources>=5.0; python_version < '3.10'",
    "qiskit>=1.0.0",
    "joblib>=1.3.2",
    "numpy>=1.26; python_version >= '3.12'",
    "numpy>=1.24; python_version >= '3.11'",
    "numpy>=1.22",
    "sympy>=1.13.1",
    "matplotlib>=3.9.0; python_version > '3.11'",
    "matplotlib>=3.7.0; python_version <= '3.11'",
    "networkx>=2.8.8",
    "docplex>=2.25.236",
    "qiskit_optimization>=0.6.0",
    "tsplib95>=0.7.1",
    "jsonschema>=4.20.0",
    "IPython>=8.12.1",
    "ipywidgets>=8.1.1",
    "typing_extensions>=4.8.0",
]

classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: MacOS",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Intended Audience :: Science/Research",
    "Natural Language :: English",
    "Topic :: Scientific/Engineering :: Electronic Design Automation (EDA)",
    "Typing :: Typed",
]

[project.optional-dependencies]
test = ["pytest>=7.2"]
coverage = ["mqt.qubomaker[test]", "pytest-cov>=4"]
docs = [
    "furo>=2023.9.10",
    "setuptools-scm>=8.1",
    "sphinxcontrib-bibtex>=2.4.2",
    "sphinx-copybutton>=0.5",
    "ipykernel",
    "nbsphinx",
    "sphinxext-opengraph>=0.9",
    "sphinx-autodoc-typehints",
    "qiskit[visualization]",
]
dev = ["mqt.qubomaker[coverage, docs]"]

[project.urls]
Homepage = "https://github.com/cda-tum/mqt-qubomaker"
Documentation = "https://mqt.readthedocs.io/projects/qubomaker"
Issues = "https://github.com/cda-tum/mqt-qubomaker/issues"
Discussions = "https://github.com/cda-tum/mqt-qubomaker/discussions"

[tool.setuptools_scm]

[tool.setuptools.package-data]
"mqt.qubomaker.pathfinder" = ["resources/*", "resources/constraints/*"]

[tool.pytest.ini_options]
minversion = "7.2"
testpaths = ["tests"]
addopts = ["-ra", "--strict-markers", "--strict-config", "--showlocals"]
log_cli_level = "INFO"
xfail_strict = true
filterwarnings = [
    "error",
    "ignore:.*invalid escape sequence.*::.*docplex.*",
]

[tool.coverage]
run.source = ["mqt.qubomaker"]
report.exclude_also = [
    '\.\.\.',
    'if TYPE_CHECKING:',
    'raise AssertionError',
    'raise NotImplementedError',
]

[tool.mypy]
mypy_path = "$MYPY_CONFIG_FILE_DIR/src,$MYPY_CONFIG_FILE_DIR/stubs"
files = ["src", "tests"]
python_version = "3.9"
strict = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
warn_unreachable = true
explicit_package_bases = true
pretty = true

[[tool.mypy.overrides]]
module = ["types-Pillow", "jsonschema", "tsplib95.*", "ipywidgets.*", "IPython.*", "qiskit.*", "qiskit_algorithms.*", "matplotlib.*", "networkx.*", "mqt.ddsim.*", "joblib.*", "qiskit_optimization.*", "docplex.*", "typing_extensions.*", "numpy.*"]
ignore_missing_imports = true


[tool.check-wheel-contents]
ignore = ["W002"]  # Triggers on __init__.py's


[tool.ruff]
line-length = 120
preview = true
unsafe-fixes = true

[tool.ruff.lint]
extend-select = [
    "A", # flake8-builtins
    "ANN", # flake8-annotations
    "ARG", # flake8-unused-arguments
    "ASYNC", # flake8-async
    "B", "B904", # flake8-bugbear
    "C4", # flake8-comprehensions
    "D", # pydocstyle
    "EM", # flake8-errmsg
    "EXE", # flake8-executable
    "FA", # flake8-future-annotations
    "FLY", # flynt
    "FURB", # refurb
    "I", # isort
    "ICN", # flake8-import-conventions
    "ISC", # flake8-implicit-str-concat
    "N", # flake8-naming
    "NPY", # numpy
    "PERF", # perflint
    "PGH", # pygrep-hooks
    "PIE", # flake8-pie
    "PL", # pylint
    "PT", # flake8-pytest-style
    "PTH", # flake8-use-pathlib
    "PYI", # flake8-pyi
    "Q", # flake8-quotes
    "RET", # flake8-return
    "RSE", # flake8-raise
    "RUF", # Ruff-specific
    "SLF", # flake8-self
    "SLOT", # flake8-slots
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "TID251", # flake8-tidy-imports.banned-api
    "TRY", # tryceratops
    "UP", # pyupgrade
    "YTT", # flake8-2020
]
ignore = [
    "ISC001", # Conflicts with formatter
    "PLR09", # Too many <...>
    "PLR2004", # Magic value used in comparison
    "PLC0415", # Import should be at top of file
    "S101", # Use of assert detected
]
isort.required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.flake8-tidy-imports.banned-api]
"typing.Callable".msg = "Use collections.abc.Callable instead."
"typing.Iterator".msg = "Use collections.abc.Iterator instead."
"typing.Mapping".msg = "Use collections.abc.Mapping instead."
"typing.Sequence".msg = "Use collections.abc.Sequence instead."
"typing.Set".msg = "Use collections.abc.Set instead."
"importlib.resources".msg = "Use mqt.qubomaker._compat.importlib.resources instead."
"importlib_resources".msg = "Use mqt.qubomaker._compat.importlib.resources instead."

[tool.ruff.lint.per-file-ignores]
"src/mqt/qubomaker/pathfinder/cost_functions.py" = ["ANN401"]
"test/python/**" = ["T20", "ANN"]
"docs/**" = ["T20"]
"noxfile.py" = ["T20", "TID251"]
"*.pyi" = ["D"]  # pydocstyle
"*.ipynb" = [
    "D", # pydocstyle
    "E402", # Allow imports to appear anywhere in Jupyter notebooks
    "I002", # Allow missing `from __future__ import annotations` import
]
"src/mqt/qubomaker/_compat/**.py" = ["TID251"]

[tool.ruff.lint.pydocstyle]
convention = "google"


[tool.typos]
default.extend-ignore-re = [
    '"id": ".*",',
    "(?Rm)^.*(#|//)\\s*spellchecker:disable-line$",  # ignore line
    "(?s)(#|//)\\s*spellchecker:off.*?\\n\\s*(#|//)\\s*spellchecker:on", # ignore block
    "NDArray",
]
[tool.typos.default.extend-words]
wille = "wille"


[tool.repo-review]
ignore = ["GH200"]
